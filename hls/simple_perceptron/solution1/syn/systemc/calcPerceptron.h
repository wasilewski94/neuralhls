// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _calcPerceptron_HH_
#define _calcPerceptron_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "calcPerceptron_fadd_32ns_32ns_32_5_full_dsp_1.h"
#include "calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1.h"
#include "calcPerceptron_frecip_32ns_32ns_32_10_full_dsp_1.h"
#include "calcPerceptron_fexp_32ns_32ns_32_9_full_dsp_1.h"
#include "calcPerceptron_CTRL_BUS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_CTRL_BUS_DATA_WIDTH = 32>
struct calcPerceptron : public sc_module {
    // Port declarations 48
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<32> > x_Addr_A;
    sc_out< sc_logic > x_EN_A;
    sc_out< sc_lv<4> > x_WEN_A;
    sc_out< sc_lv<32> > x_Din_A;
    sc_in< sc_lv<32> > x_Dout_A;
    sc_out< sc_logic > x_Clk_A;
    sc_out< sc_logic > x_Rst_A;
    sc_out< sc_lv<32> > w_Addr_A;
    sc_out< sc_logic > w_EN_A;
    sc_out< sc_lv<4> > w_WEN_A;
    sc_out< sc_lv<32> > w_Din_A;
    sc_in< sc_lv<32> > w_Dout_A;
    sc_out< sc_logic > w_Clk_A;
    sc_out< sc_logic > w_Rst_A;
    sc_out< sc_lv<32> > b_Addr_A;
    sc_out< sc_logic > b_EN_A;
    sc_out< sc_lv<4> > b_WEN_A;
    sc_out< sc_lv<32> > b_Din_A;
    sc_in< sc_lv<32> > b_Dout_A;
    sc_out< sc_logic > b_Clk_A;
    sc_out< sc_logic > b_Rst_A;
    sc_out< sc_lv<32> > res_Addr_A;
    sc_out< sc_logic > res_EN_A;
    sc_out< sc_lv<4> > res_WEN_A;
    sc_out< sc_lv<32> > res_Din_A;
    sc_in< sc_lv<32> > res_Dout_A;
    sc_out< sc_logic > res_Clk_A;
    sc_out< sc_logic > res_Rst_A;
    sc_in< sc_logic > s_axi_CTRL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_ADDR_WIDTH> > s_axi_CTRL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CTRL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH> > s_axi_CTRL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH/8> > s_axi_CTRL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CTRL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_ADDR_WIDTH> > s_axi_CTRL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CTRL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CTRL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH> > s_axi_CTRL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CTRL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CTRL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CTRL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CTRL_BUS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const1;


    // Module declarations
    calcPerceptron(sc_module_name name);
    SC_HAS_PROCESS(calcPerceptron);

    ~calcPerceptron();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    calcPerceptron_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>* calcPerceptron_CTRL_BUS_s_axi_U;
    calcPerceptron_fadd_32ns_32ns_32_5_full_dsp_1<1,5,32,32,32>* calcPerceptron_fadd_32ns_32ns_32_5_full_dsp_1_U1;
    calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1<1,4,32,32,32>* calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1_U2;
    calcPerceptron_frecip_32ns_32ns_32_10_full_dsp_1<1,10,32,32,32>* calcPerceptron_frecip_32ns_32ns_32_10_full_dsp_1_U3;
    calcPerceptron_fexp_32ns_32ns_32_9_full_dsp_1<1,9,32,32,32>* calcPerceptron_fexp_32ns_32ns_32_9_full_dsp_1_U4;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<39> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > inputs;
    sc_signal< sc_lv<32> > neurons;
    sc_signal< sc_lv<32> > w_offset;
    sc_signal< sc_lv<32> > b_offset;
    sc_signal< sc_lv<32> > sum_1_reg_160;
    sc_signal< sc_lv<31> > i_0_reg_172;
    sc_signal< sc_lv<32> > grp_fu_183_p2;
    sc_signal< sc_lv<32> > reg_203;
    sc_signal< sc_logic > ap_CS_fsm_state20;
    sc_signal< sc_logic > ap_CS_fsm_state34;
    sc_signal< sc_lv<32> > b_offset_read_reg_293;
    sc_signal< sc_lv<32> > w_offset_read_reg_298;
    sc_signal< sc_lv<32> > neurons_read_reg_303;
    sc_signal< sc_lv<32> > inputs_read_reg_308;
    sc_signal< sc_lv<32> > add_ln29_fu_208_p2;
    sc_signal< sc_lv<32> > add_ln29_reg_314;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > zext_ln29_fu_213_p1;
    sc_signal< sc_lv<32> > zext_ln29_reg_319;
    sc_signal< sc_lv<1> > icmp_ln29_fu_217_p2;
    sc_signal< sc_lv<31> > j_fu_222_p2;
    sc_signal< sc_lv<31> > j_reg_328;
    sc_signal< sc_lv<1> > icmp_ln30_fu_232_p2;
    sc_signal< sc_lv<1> > icmp_ln30_reg_333;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state13_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln30_reg_333_pp0_iter1_reg;
    sc_signal< sc_lv<31> > i_fu_237_p2;
    sc_signal< sc_lv<31> > i_reg_337;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > x_load_reg_352;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state4_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state9_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<32> > w_load_reg_357;
    sc_signal< sc_lv<32> > grp_fu_189_p2;
    sc_signal< sc_lv<32> > tmp_reg_362;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<32> > b_load_reg_377;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_logic > ap_CS_fsm_state21;
    sc_signal< sc_lv<32> > grp_fu_198_p2;
    sc_signal< sc_lv<32> > tmp_i_i_reg_387;
    sc_signal< sc_logic > ap_CS_fsm_state29;
    sc_signal< sc_lv<32> > grp_fu_193_p2;
    sc_signal< sc_lv<32> > tmp_1_reg_392;
    sc_signal< sc_logic > ap_CS_fsm_state44;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_state7_pp0_stage4_iter0;
    sc_signal< bool > ap_block_state12_pp0_stage4_iter1;
    sc_signal< bool > ap_block_pp0_stage4_subdone;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage4;
    sc_signal< sc_lv<31> > j_0_reg_136;
    sc_signal< sc_logic > ap_CS_fsm_state45;
    sc_signal< sc_lv<32> > phi_mul_reg_148;
    sc_signal< sc_lv<32> > ap_phi_mux_sum_1_phi_fu_164_p4;
    sc_signal< sc_lv<31> > ap_phi_mux_i_0_phi_fu_176_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln31_fu_243_p1;
    sc_signal< sc_lv<64> > sext_ln31_fu_259_p1;
    sc_signal< sc_lv<64> > sext_ln33_fu_268_p1;
    sc_signal< sc_lv<64> > zext_ln33_fu_288_p1;
    sc_signal< sc_lv<32> > x_Addr_A_orig;
    sc_signal< sc_lv<32> > w_Addr_A_orig;
    sc_signal< sc_lv<32> > b_Addr_A_orig;
    sc_signal< sc_lv<32> > res_Addr_A_orig;
    sc_signal< sc_lv<32> > grp_fu_183_p0;
    sc_signal< sc_lv<32> > grp_fu_183_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_logic > ap_CS_fsm_state30;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< sc_logic > ap_CS_fsm_state35;
    sc_signal< sc_lv<32> > grp_fu_198_p1;
    sc_signal< sc_lv<32> > i_0_cast_fu_228_p1;
    sc_signal< sc_lv<32> > add_ln31_fu_248_p2;
    sc_signal< sc_lv<32> > add_ln31_1_fu_253_p2;
    sc_signal< sc_lv<32> > add_ln33_fu_264_p2;
    sc_signal< sc_lv<32> > bitcast_ln33_fu_273_p1;
    sc_signal< sc_lv<32> > xor_ln33_fu_277_p2;
    sc_signal< sc_lv<39> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_state5_pp0_stage2_iter0;
    sc_signal< bool > ap_block_state10_pp0_stage2_iter1;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< bool > ap_block_state6_pp0_stage3_iter0;
    sc_signal< bool > ap_block_state11_pp0_stage3_iter1;
    sc_signal< bool > ap_block_pp0_stage3_subdone;
    sc_signal< bool > ap_block_pp0_stage3_11001;
    sc_signal< bool > ap_block_pp0_stage4_11001;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<39> ap_ST_fsm_state1;
    static const sc_lv<39> ap_ST_fsm_state2;
    static const sc_lv<39> ap_ST_fsm_pp0_stage0;
    static const sc_lv<39> ap_ST_fsm_pp0_stage1;
    static const sc_lv<39> ap_ST_fsm_pp0_stage2;
    static const sc_lv<39> ap_ST_fsm_pp0_stage3;
    static const sc_lv<39> ap_ST_fsm_pp0_stage4;
    static const sc_lv<39> ap_ST_fsm_state14;
    static const sc_lv<39> ap_ST_fsm_state15;
    static const sc_lv<39> ap_ST_fsm_state16;
    static const sc_lv<39> ap_ST_fsm_state17;
    static const sc_lv<39> ap_ST_fsm_state18;
    static const sc_lv<39> ap_ST_fsm_state19;
    static const sc_lv<39> ap_ST_fsm_state20;
    static const sc_lv<39> ap_ST_fsm_state21;
    static const sc_lv<39> ap_ST_fsm_state22;
    static const sc_lv<39> ap_ST_fsm_state23;
    static const sc_lv<39> ap_ST_fsm_state24;
    static const sc_lv<39> ap_ST_fsm_state25;
    static const sc_lv<39> ap_ST_fsm_state26;
    static const sc_lv<39> ap_ST_fsm_state27;
    static const sc_lv<39> ap_ST_fsm_state28;
    static const sc_lv<39> ap_ST_fsm_state29;
    static const sc_lv<39> ap_ST_fsm_state30;
    static const sc_lv<39> ap_ST_fsm_state31;
    static const sc_lv<39> ap_ST_fsm_state32;
    static const sc_lv<39> ap_ST_fsm_state33;
    static const sc_lv<39> ap_ST_fsm_state34;
    static const sc_lv<39> ap_ST_fsm_state35;
    static const sc_lv<39> ap_ST_fsm_state36;
    static const sc_lv<39> ap_ST_fsm_state37;
    static const sc_lv<39> ap_ST_fsm_state38;
    static const sc_lv<39> ap_ST_fsm_state39;
    static const sc_lv<39> ap_ST_fsm_state40;
    static const sc_lv<39> ap_ST_fsm_state41;
    static const sc_lv<39> ap_ST_fsm_state42;
    static const sc_lv<39> ap_ST_fsm_state43;
    static const sc_lv<39> ap_ST_fsm_state44;
    static const sc_lv<39> ap_ST_fsm_state45;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_1B;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<32> ap_const_lv32_25;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_26;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_3F800000;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_1C;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<32> ap_const_lv32_80000000;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_add_ln29_fu_208_p2();
    void thread_add_ln31_1_fu_253_p2();
    void thread_add_ln31_fu_248_p2();
    void thread_add_ln33_fu_264_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage4();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state20();
    void thread_ap_CS_fsm_state21();
    void thread_ap_CS_fsm_state29();
    void thread_ap_CS_fsm_state30();
    void thread_ap_CS_fsm_state34();
    void thread_ap_CS_fsm_state35();
    void thread_ap_CS_fsm_state44();
    void thread_ap_CS_fsm_state45();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_pp0_stage3_11001();
    void thread_ap_block_pp0_stage3_subdone();
    void thread_ap_block_pp0_stage4_11001();
    void thread_ap_block_pp0_stage4_subdone();
    void thread_ap_block_state10_pp0_stage2_iter1();
    void thread_ap_block_state11_pp0_stage3_iter1();
    void thread_ap_block_state12_pp0_stage4_iter1();
    void thread_ap_block_state13_pp0_stage0_iter2();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage1_iter0();
    void thread_ap_block_state5_pp0_stage2_iter0();
    void thread_ap_block_state6_pp0_stage3_iter0();
    void thread_ap_block_state7_pp0_stage4_iter0();
    void thread_ap_block_state8_pp0_stage0_iter1();
    void thread_ap_block_state9_pp0_stage1_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_phi_fu_176_p4();
    void thread_ap_phi_mux_sum_1_phi_fu_164_p4();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_b_Addr_A();
    void thread_b_Addr_A_orig();
    void thread_b_Clk_A();
    void thread_b_Din_A();
    void thread_b_EN_A();
    void thread_b_Rst_A();
    void thread_b_WEN_A();
    void thread_bitcast_ln33_fu_273_p1();
    void thread_grp_fu_183_p0();
    void thread_grp_fu_183_p1();
    void thread_grp_fu_198_p1();
    void thread_i_0_cast_fu_228_p1();
    void thread_i_fu_237_p2();
    void thread_icmp_ln29_fu_217_p2();
    void thread_icmp_ln30_fu_232_p2();
    void thread_j_fu_222_p2();
    void thread_res_Addr_A();
    void thread_res_Addr_A_orig();
    void thread_res_Clk_A();
    void thread_res_Din_A();
    void thread_res_EN_A();
    void thread_res_Rst_A();
    void thread_res_WEN_A();
    void thread_sext_ln31_fu_259_p1();
    void thread_sext_ln33_fu_268_p1();
    void thread_w_Addr_A();
    void thread_w_Addr_A_orig();
    void thread_w_Clk_A();
    void thread_w_Din_A();
    void thread_w_EN_A();
    void thread_w_Rst_A();
    void thread_w_WEN_A();
    void thread_x_Addr_A();
    void thread_x_Addr_A_orig();
    void thread_x_Clk_A();
    void thread_x_Din_A();
    void thread_x_EN_A();
    void thread_x_Rst_A();
    void thread_x_WEN_A();
    void thread_xor_ln33_fu_277_p2();
    void thread_zext_ln29_fu_213_p1();
    void thread_zext_ln31_fu_243_p1();
    void thread_zext_ln33_fu_288_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
