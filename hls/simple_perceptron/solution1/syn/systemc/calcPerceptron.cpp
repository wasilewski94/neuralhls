// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "calcPerceptron.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic calcPerceptron::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic calcPerceptron::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<39> calcPerceptron::ap_ST_fsm_state1 = "1";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state2 = "10";
const sc_lv<39> calcPerceptron::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<39> calcPerceptron::ap_ST_fsm_pp0_stage1 = "1000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_pp0_stage2 = "10000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_pp0_stage3 = "100000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_pp0_stage4 = "1000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state14 = "10000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state15 = "100000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state16 = "1000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state17 = "10000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state18 = "100000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state19 = "1000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state20 = "10000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state21 = "100000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state22 = "1000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state23 = "10000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state24 = "100000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state25 = "1000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state26 = "10000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state27 = "100000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state28 = "1000000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state29 = "10000000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state30 = "100000000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state31 = "1000000000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state32 = "10000000000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state33 = "100000000000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state34 = "1000000000000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state35 = "10000000000000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state36 = "100000000000000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state37 = "1000000000000000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state38 = "10000000000000000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state39 = "100000000000000000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state40 = "1000000000000000000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state41 = "10000000000000000000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state42 = "100000000000000000000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state43 = "1000000000000000000000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state44 = "10000000000000000000000000000000000000";
const sc_lv<39> calcPerceptron::ap_ST_fsm_state45 = "100000000000000000000000000000000000000";
const sc_lv<32> calcPerceptron::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool calcPerceptron::ap_const_boolean_1 = true;
const int calcPerceptron::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> calcPerceptron::ap_const_lv32_D = "1101";
const sc_lv<32> calcPerceptron::ap_const_lv32_1B = "11011";
const sc_lv<32> calcPerceptron::ap_const_lv32_1 = "1";
const sc_lv<32> calcPerceptron::ap_const_lv32_2 = "10";
const bool calcPerceptron::ap_const_boolean_0 = false;
const sc_lv<1> calcPerceptron::ap_const_lv1_1 = "1";
const sc_lv<32> calcPerceptron::ap_const_lv32_3 = "11";
const sc_lv<32> calcPerceptron::ap_const_lv32_7 = "111";
const sc_lv<32> calcPerceptron::ap_const_lv32_8 = "1000";
const sc_lv<32> calcPerceptron::ap_const_lv32_E = "1110";
const sc_lv<32> calcPerceptron::ap_const_lv32_16 = "10110";
const sc_lv<32> calcPerceptron::ap_const_lv32_25 = "100101";
const sc_lv<1> calcPerceptron::ap_const_lv1_0 = "0";
const sc_lv<32> calcPerceptron::ap_const_lv32_6 = "110";
const sc_lv<31> calcPerceptron::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> calcPerceptron::ap_const_lv32_26 = "100110";
const sc_lv<4> calcPerceptron::ap_const_lv4_0 = "0000";
const sc_lv<4> calcPerceptron::ap_const_lv4_F = "1111";
const sc_lv<32> calcPerceptron::ap_const_lv32_3F800000 = "111111100000000000000000000000";
const sc_lv<32> calcPerceptron::ap_const_lv32_9 = "1001";
const sc_lv<32> calcPerceptron::ap_const_lv32_17 = "10111";
const sc_lv<32> calcPerceptron::ap_const_lv32_4 = "100";
const sc_lv<32> calcPerceptron::ap_const_lv32_1C = "11100";
const sc_lv<31> calcPerceptron::ap_const_lv31_1 = "1";
const sc_lv<32> calcPerceptron::ap_const_lv32_80000000 = "10000000000000000000000000000000";

calcPerceptron::calcPerceptron(sc_module_name name) : sc_module(name), mVcdFile(0) {
    calcPerceptron_CTRL_BUS_s_axi_U = new calcPerceptron_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>("calcPerceptron_CTRL_BUS_s_axi_U");
    calcPerceptron_CTRL_BUS_s_axi_U->AWVALID(s_axi_CTRL_BUS_AWVALID);
    calcPerceptron_CTRL_BUS_s_axi_U->AWREADY(s_axi_CTRL_BUS_AWREADY);
    calcPerceptron_CTRL_BUS_s_axi_U->AWADDR(s_axi_CTRL_BUS_AWADDR);
    calcPerceptron_CTRL_BUS_s_axi_U->WVALID(s_axi_CTRL_BUS_WVALID);
    calcPerceptron_CTRL_BUS_s_axi_U->WREADY(s_axi_CTRL_BUS_WREADY);
    calcPerceptron_CTRL_BUS_s_axi_U->WDATA(s_axi_CTRL_BUS_WDATA);
    calcPerceptron_CTRL_BUS_s_axi_U->WSTRB(s_axi_CTRL_BUS_WSTRB);
    calcPerceptron_CTRL_BUS_s_axi_U->ARVALID(s_axi_CTRL_BUS_ARVALID);
    calcPerceptron_CTRL_BUS_s_axi_U->ARREADY(s_axi_CTRL_BUS_ARREADY);
    calcPerceptron_CTRL_BUS_s_axi_U->ARADDR(s_axi_CTRL_BUS_ARADDR);
    calcPerceptron_CTRL_BUS_s_axi_U->RVALID(s_axi_CTRL_BUS_RVALID);
    calcPerceptron_CTRL_BUS_s_axi_U->RREADY(s_axi_CTRL_BUS_RREADY);
    calcPerceptron_CTRL_BUS_s_axi_U->RDATA(s_axi_CTRL_BUS_RDATA);
    calcPerceptron_CTRL_BUS_s_axi_U->RRESP(s_axi_CTRL_BUS_RRESP);
    calcPerceptron_CTRL_BUS_s_axi_U->BVALID(s_axi_CTRL_BUS_BVALID);
    calcPerceptron_CTRL_BUS_s_axi_U->BREADY(s_axi_CTRL_BUS_BREADY);
    calcPerceptron_CTRL_BUS_s_axi_U->BRESP(s_axi_CTRL_BUS_BRESP);
    calcPerceptron_CTRL_BUS_s_axi_U->ACLK(ap_clk);
    calcPerceptron_CTRL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    calcPerceptron_CTRL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    calcPerceptron_CTRL_BUS_s_axi_U->ap_start(ap_start);
    calcPerceptron_CTRL_BUS_s_axi_U->interrupt(interrupt);
    calcPerceptron_CTRL_BUS_s_axi_U->ap_ready(ap_ready);
    calcPerceptron_CTRL_BUS_s_axi_U->ap_done(ap_done);
    calcPerceptron_CTRL_BUS_s_axi_U->ap_idle(ap_idle);
    calcPerceptron_CTRL_BUS_s_axi_U->inputs(inputs);
    calcPerceptron_CTRL_BUS_s_axi_U->neurons(neurons);
    calcPerceptron_CTRL_BUS_s_axi_U->w_offset(w_offset);
    calcPerceptron_CTRL_BUS_s_axi_U->b_offset(b_offset);
    calcPerceptron_fadd_32ns_32ns_32_5_full_dsp_1_U1 = new calcPerceptron_fadd_32ns_32ns_32_5_full_dsp_1<1,5,32,32,32>("calcPerceptron_fadd_32ns_32ns_32_5_full_dsp_1_U1");
    calcPerceptron_fadd_32ns_32ns_32_5_full_dsp_1_U1->clk(ap_clk);
    calcPerceptron_fadd_32ns_32ns_32_5_full_dsp_1_U1->reset(ap_rst_n_inv);
    calcPerceptron_fadd_32ns_32ns_32_5_full_dsp_1_U1->din0(grp_fu_183_p0);
    calcPerceptron_fadd_32ns_32ns_32_5_full_dsp_1_U1->din1(grp_fu_183_p1);
    calcPerceptron_fadd_32ns_32ns_32_5_full_dsp_1_U1->ce(ap_var_for_const0);
    calcPerceptron_fadd_32ns_32ns_32_5_full_dsp_1_U1->dout(grp_fu_183_p2);
    calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1_U2 = new calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1<1,4,32,32,32>("calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1_U2");
    calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1_U2->clk(ap_clk);
    calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1_U2->reset(ap_rst_n_inv);
    calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1_U2->din0(x_load_reg_352);
    calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1_U2->din1(w_load_reg_357);
    calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1_U2->ce(ap_var_for_const0);
    calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1_U2->dout(grp_fu_189_p2);
    calcPerceptron_frecip_32ns_32ns_32_10_full_dsp_1_U3 = new calcPerceptron_frecip_32ns_32ns_32_10_full_dsp_1<1,10,32,32,32>("calcPerceptron_frecip_32ns_32ns_32_10_full_dsp_1_U3");
    calcPerceptron_frecip_32ns_32ns_32_10_full_dsp_1_U3->clk(ap_clk);
    calcPerceptron_frecip_32ns_32ns_32_10_full_dsp_1_U3->reset(ap_rst_n_inv);
    calcPerceptron_frecip_32ns_32ns_32_10_full_dsp_1_U3->din0(ap_var_for_const1);
    calcPerceptron_frecip_32ns_32ns_32_10_full_dsp_1_U3->din1(reg_203);
    calcPerceptron_frecip_32ns_32ns_32_10_full_dsp_1_U3->ce(ap_var_for_const0);
    calcPerceptron_frecip_32ns_32ns_32_10_full_dsp_1_U3->dout(grp_fu_193_p2);
    calcPerceptron_fexp_32ns_32ns_32_9_full_dsp_1_U4 = new calcPerceptron_fexp_32ns_32ns_32_9_full_dsp_1<1,9,32,32,32>("calcPerceptron_fexp_32ns_32ns_32_9_full_dsp_1_U4");
    calcPerceptron_fexp_32ns_32ns_32_9_full_dsp_1_U4->clk(ap_clk);
    calcPerceptron_fexp_32ns_32ns_32_9_full_dsp_1_U4->reset(ap_rst_n_inv);
    calcPerceptron_fexp_32ns_32ns_32_9_full_dsp_1_U4->din0(ap_var_for_const1);
    calcPerceptron_fexp_32ns_32ns_32_9_full_dsp_1_U4->din1(grp_fu_198_p1);
    calcPerceptron_fexp_32ns_32ns_32_9_full_dsp_1_U4->ce(ap_var_for_const0);
    calcPerceptron_fexp_32ns_32ns_32_9_full_dsp_1_U4->dout(grp_fu_198_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln29_fu_208_p2);
    sensitive << ( inputs_read_reg_308 );
    sensitive << ( phi_mul_reg_148 );

    SC_METHOD(thread_add_ln31_1_fu_253_p2);
    sensitive << ( phi_mul_reg_148 );
    sensitive << ( add_ln31_fu_248_p2 );

    SC_METHOD(thread_add_ln31_fu_248_p2);
    sensitive << ( w_offset_read_reg_298 );
    sensitive << ( i_0_cast_fu_228_p1 );

    SC_METHOD(thread_add_ln33_fu_264_p2);
    sensitive << ( b_offset_read_reg_293 );
    sensitive << ( zext_ln29_reg_319 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state44);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state45);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);

    SC_METHOD(thread_ap_block_pp0_stage2);

    SC_METHOD(thread_ap_block_pp0_stage2_11001);

    SC_METHOD(thread_ap_block_pp0_stage2_subdone);

    SC_METHOD(thread_ap_block_pp0_stage3_11001);

    SC_METHOD(thread_ap_block_pp0_stage3_subdone);

    SC_METHOD(thread_ap_block_pp0_stage4_11001);

    SC_METHOD(thread_ap_block_pp0_stage4_subdone);

    SC_METHOD(thread_ap_block_state10_pp0_stage2_iter1);

    SC_METHOD(thread_ap_block_state11_pp0_stage3_iter1);

    SC_METHOD(thread_ap_block_state12_pp0_stage4_iter1);

    SC_METHOD(thread_ap_block_state13_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state5_pp0_stage2_iter0);

    SC_METHOD(thread_ap_block_state6_pp0_stage3_iter0);

    SC_METHOD(thread_ap_block_state7_pp0_stage4_iter0);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state9_pp0_stage1_iter1);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( icmp_ln30_fu_232_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln29_fu_217_p2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_i_0_phi_fu_176_p4);
    sensitive << ( i_0_reg_172 );
    sensitive << ( icmp_ln30_reg_333 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_reg_337 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_sum_1_phi_fu_164_p4);
    sensitive << ( sum_1_reg_160 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln29_fu_217_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_b_Addr_A);
    sensitive << ( b_Addr_A_orig );

    SC_METHOD(thread_b_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( sext_ln33_fu_268_p1 );

    SC_METHOD(thread_b_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_b_Din_A);

    SC_METHOD(thread_b_EN_A);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_b_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_b_WEN_A);

    SC_METHOD(thread_bitcast_ln33_fu_273_p1);
    sensitive << ( reg_203 );

    SC_METHOD(thread_grp_fu_183_p0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( tmp_reg_362 );
    sensitive << ( b_load_reg_377 );
    sensitive << ( tmp_i_i_reg_387 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_grp_fu_183_p1);
    sensitive << ( sum_1_reg_160 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_phi_mux_sum_1_phi_fu_164_p4 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_grp_fu_198_p1);
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( xor_ln33_fu_277_p2 );

    SC_METHOD(thread_i_0_cast_fu_228_p1);
    sensitive << ( ap_phi_mux_i_0_phi_fu_176_p4 );

    SC_METHOD(thread_i_fu_237_p2);
    sensitive << ( ap_phi_mux_i_0_phi_fu_176_p4 );

    SC_METHOD(thread_icmp_ln29_fu_217_p2);
    sensitive << ( neurons_read_reg_303 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln29_fu_213_p1 );

    SC_METHOD(thread_icmp_ln30_fu_232_p2);
    sensitive << ( inputs_read_reg_308 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( i_0_cast_fu_228_p1 );

    SC_METHOD(thread_j_fu_222_p2);
    sensitive << ( j_0_reg_136 );

    SC_METHOD(thread_res_Addr_A);
    sensitive << ( res_Addr_A_orig );

    SC_METHOD(thread_res_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( zext_ln33_fu_288_p1 );

    SC_METHOD(thread_res_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_res_Din_A);
    sensitive << ( tmp_1_reg_392 );
    sensitive << ( ap_CS_fsm_state45 );

    SC_METHOD(thread_res_EN_A);
    sensitive << ( ap_CS_fsm_state45 );

    SC_METHOD(thread_res_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_res_WEN_A);
    sensitive << ( ap_CS_fsm_state45 );

    SC_METHOD(thread_sext_ln31_fu_259_p1);
    sensitive << ( add_ln31_1_fu_253_p2 );

    SC_METHOD(thread_sext_ln33_fu_268_p1);
    sensitive << ( add_ln33_fu_264_p2 );

    SC_METHOD(thread_w_Addr_A);
    sensitive << ( w_Addr_A_orig );

    SC_METHOD(thread_w_Addr_A_orig);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( sext_ln31_fu_259_p1 );

    SC_METHOD(thread_w_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_w_Din_A);

    SC_METHOD(thread_w_EN_A);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_w_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_w_WEN_A);

    SC_METHOD(thread_x_Addr_A);
    sensitive << ( x_Addr_A_orig );

    SC_METHOD(thread_x_Addr_A_orig);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln31_fu_243_p1 );

    SC_METHOD(thread_x_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_x_Din_A);

    SC_METHOD(thread_x_EN_A);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_x_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_x_WEN_A);

    SC_METHOD(thread_xor_ln33_fu_277_p2);
    sensitive << ( bitcast_ln33_fu_273_p1 );

    SC_METHOD(thread_zext_ln29_fu_213_p1);
    sensitive << ( j_0_reg_136 );

    SC_METHOD(thread_zext_ln31_fu_243_p1);
    sensitive << ( ap_phi_mux_i_0_phi_fu_176_p4 );

    SC_METHOD(thread_zext_ln33_fu_288_p1);
    sensitive << ( j_0_reg_136 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln29_fu_217_p2 );
    sensitive << ( icmp_ln30_fu_232_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage4_subdone );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_block_pp0_stage2_subdone );
    sensitive << ( ap_block_pp0_stage3_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "000000000000000000000000000000000000001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "calcPerceptron_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, x_Addr_A, "(port)x_Addr_A");
    sc_trace(mVcdFile, x_EN_A, "(port)x_EN_A");
    sc_trace(mVcdFile, x_WEN_A, "(port)x_WEN_A");
    sc_trace(mVcdFile, x_Din_A, "(port)x_Din_A");
    sc_trace(mVcdFile, x_Dout_A, "(port)x_Dout_A");
    sc_trace(mVcdFile, x_Clk_A, "(port)x_Clk_A");
    sc_trace(mVcdFile, x_Rst_A, "(port)x_Rst_A");
    sc_trace(mVcdFile, w_Addr_A, "(port)w_Addr_A");
    sc_trace(mVcdFile, w_EN_A, "(port)w_EN_A");
    sc_trace(mVcdFile, w_WEN_A, "(port)w_WEN_A");
    sc_trace(mVcdFile, w_Din_A, "(port)w_Din_A");
    sc_trace(mVcdFile, w_Dout_A, "(port)w_Dout_A");
    sc_trace(mVcdFile, w_Clk_A, "(port)w_Clk_A");
    sc_trace(mVcdFile, w_Rst_A, "(port)w_Rst_A");
    sc_trace(mVcdFile, b_Addr_A, "(port)b_Addr_A");
    sc_trace(mVcdFile, b_EN_A, "(port)b_EN_A");
    sc_trace(mVcdFile, b_WEN_A, "(port)b_WEN_A");
    sc_trace(mVcdFile, b_Din_A, "(port)b_Din_A");
    sc_trace(mVcdFile, b_Dout_A, "(port)b_Dout_A");
    sc_trace(mVcdFile, b_Clk_A, "(port)b_Clk_A");
    sc_trace(mVcdFile, b_Rst_A, "(port)b_Rst_A");
    sc_trace(mVcdFile, res_Addr_A, "(port)res_Addr_A");
    sc_trace(mVcdFile, res_EN_A, "(port)res_EN_A");
    sc_trace(mVcdFile, res_WEN_A, "(port)res_WEN_A");
    sc_trace(mVcdFile, res_Din_A, "(port)res_Din_A");
    sc_trace(mVcdFile, res_Dout_A, "(port)res_Dout_A");
    sc_trace(mVcdFile, res_Clk_A, "(port)res_Clk_A");
    sc_trace(mVcdFile, res_Rst_A, "(port)res_Rst_A");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWVALID, "(port)s_axi_CTRL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWREADY, "(port)s_axi_CTRL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWADDR, "(port)s_axi_CTRL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WVALID, "(port)s_axi_CTRL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WREADY, "(port)s_axi_CTRL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WDATA, "(port)s_axi_CTRL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WSTRB, "(port)s_axi_CTRL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARVALID, "(port)s_axi_CTRL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARREADY, "(port)s_axi_CTRL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARADDR, "(port)s_axi_CTRL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RVALID, "(port)s_axi_CTRL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RREADY, "(port)s_axi_CTRL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RDATA, "(port)s_axi_CTRL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RRESP, "(port)s_axi_CTRL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BVALID, "(port)s_axi_CTRL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BREADY, "(port)s_axi_CTRL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BRESP, "(port)s_axi_CTRL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, inputs, "inputs");
    sc_trace(mVcdFile, neurons, "neurons");
    sc_trace(mVcdFile, w_offset, "w_offset");
    sc_trace(mVcdFile, b_offset, "b_offset");
    sc_trace(mVcdFile, sum_1_reg_160, "sum_1_reg_160");
    sc_trace(mVcdFile, i_0_reg_172, "i_0_reg_172");
    sc_trace(mVcdFile, grp_fu_183_p2, "grp_fu_183_p2");
    sc_trace(mVcdFile, reg_203, "reg_203");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, b_offset_read_reg_293, "b_offset_read_reg_293");
    sc_trace(mVcdFile, w_offset_read_reg_298, "w_offset_read_reg_298");
    sc_trace(mVcdFile, neurons_read_reg_303, "neurons_read_reg_303");
    sc_trace(mVcdFile, inputs_read_reg_308, "inputs_read_reg_308");
    sc_trace(mVcdFile, add_ln29_fu_208_p2, "add_ln29_fu_208_p2");
    sc_trace(mVcdFile, add_ln29_reg_314, "add_ln29_reg_314");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln29_fu_213_p1, "zext_ln29_fu_213_p1");
    sc_trace(mVcdFile, zext_ln29_reg_319, "zext_ln29_reg_319");
    sc_trace(mVcdFile, icmp_ln29_fu_217_p2, "icmp_ln29_fu_217_p2");
    sc_trace(mVcdFile, j_fu_222_p2, "j_fu_222_p2");
    sc_trace(mVcdFile, j_reg_328, "j_reg_328");
    sc_trace(mVcdFile, icmp_ln30_fu_232_p2, "icmp_ln30_fu_232_p2");
    sc_trace(mVcdFile, icmp_ln30_reg_333, "icmp_ln30_reg_333");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter1, "ap_block_state8_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage0_iter2, "ap_block_state13_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, icmp_ln30_reg_333_pp0_iter1_reg, "icmp_ln30_reg_333_pp0_iter1_reg");
    sc_trace(mVcdFile, i_fu_237_p2, "i_fu_237_p2");
    sc_trace(mVcdFile, i_reg_337, "i_reg_337");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, x_load_reg_352, "x_load_reg_352");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage1_iter0, "ap_block_state4_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage1_iter1, "ap_block_state9_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, w_load_reg_357, "w_load_reg_357");
    sc_trace(mVcdFile, grp_fu_189_p2, "grp_fu_189_p2");
    sc_trace(mVcdFile, tmp_reg_362, "tmp_reg_362");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, b_load_reg_377, "b_load_reg_377");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, grp_fu_198_p2, "grp_fu_198_p2");
    sc_trace(mVcdFile, tmp_i_i_reg_387, "tmp_i_i_reg_387");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, grp_fu_193_p2, "grp_fu_193_p2");
    sc_trace(mVcdFile, tmp_1_reg_392, "tmp_1_reg_392");
    sc_trace(mVcdFile, ap_CS_fsm_state44, "ap_CS_fsm_state44");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage4_iter0, "ap_block_state7_pp0_stage4_iter0");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage4_iter1, "ap_block_state12_pp0_stage4_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage4_subdone, "ap_block_pp0_stage4_subdone");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage4, "ap_CS_fsm_pp0_stage4");
    sc_trace(mVcdFile, j_0_reg_136, "j_0_reg_136");
    sc_trace(mVcdFile, ap_CS_fsm_state45, "ap_CS_fsm_state45");
    sc_trace(mVcdFile, phi_mul_reg_148, "phi_mul_reg_148");
    sc_trace(mVcdFile, ap_phi_mux_sum_1_phi_fu_164_p4, "ap_phi_mux_sum_1_phi_fu_164_p4");
    sc_trace(mVcdFile, ap_phi_mux_i_0_phi_fu_176_p4, "ap_phi_mux_i_0_phi_fu_176_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, zext_ln31_fu_243_p1, "zext_ln31_fu_243_p1");
    sc_trace(mVcdFile, sext_ln31_fu_259_p1, "sext_ln31_fu_259_p1");
    sc_trace(mVcdFile, sext_ln33_fu_268_p1, "sext_ln33_fu_268_p1");
    sc_trace(mVcdFile, zext_ln33_fu_288_p1, "zext_ln33_fu_288_p1");
    sc_trace(mVcdFile, x_Addr_A_orig, "x_Addr_A_orig");
    sc_trace(mVcdFile, w_Addr_A_orig, "w_Addr_A_orig");
    sc_trace(mVcdFile, b_Addr_A_orig, "b_Addr_A_orig");
    sc_trace(mVcdFile, res_Addr_A_orig, "res_Addr_A_orig");
    sc_trace(mVcdFile, grp_fu_183_p0, "grp_fu_183_p0");
    sc_trace(mVcdFile, grp_fu_183_p1, "grp_fu_183_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage2, "ap_CS_fsm_pp0_stage2");
    sc_trace(mVcdFile, ap_block_pp0_stage2, "ap_block_pp0_stage2");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, grp_fu_198_p1, "grp_fu_198_p1");
    sc_trace(mVcdFile, i_0_cast_fu_228_p1, "i_0_cast_fu_228_p1");
    sc_trace(mVcdFile, add_ln31_fu_248_p2, "add_ln31_fu_248_p2");
    sc_trace(mVcdFile, add_ln31_1_fu_253_p2, "add_ln31_1_fu_253_p2");
    sc_trace(mVcdFile, add_ln33_fu_264_p2, "add_ln33_fu_264_p2");
    sc_trace(mVcdFile, bitcast_ln33_fu_273_p1, "bitcast_ln33_fu_273_p1");
    sc_trace(mVcdFile, xor_ln33_fu_277_p2, "xor_ln33_fu_277_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage2_iter0, "ap_block_state5_pp0_stage2_iter0");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage2_iter1, "ap_block_state10_pp0_stage2_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage2_subdone, "ap_block_pp0_stage2_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage2_11001, "ap_block_pp0_stage2_11001");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage3_iter0, "ap_block_state6_pp0_stage3_iter0");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage3_iter1, "ap_block_state11_pp0_stage3_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage3_subdone, "ap_block_pp0_stage3_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage3_11001, "ap_block_pp0_stage3_11001");
    sc_trace(mVcdFile, ap_block_pp0_stage4_11001, "ap_block_pp0_stage4_11001");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("calcPerceptron.hdltvin.dat");
    mHdltvoutHandle.open("calcPerceptron.hdltvout.dat");
}

calcPerceptron::~calcPerceptron() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete calcPerceptron_CTRL_BUS_s_axi_U;
    delete calcPerceptron_fadd_32ns_32ns_32_5_full_dsp_1_U1;
    delete calcPerceptron_fmul_32ns_32ns_32_4_max_dsp_1_U2;
    delete calcPerceptron_frecip_32ns_32ns_32_10_full_dsp_1_U3;
    delete calcPerceptron_fexp_32ns_32ns_32_9_full_dsp_1_U4;
}

void calcPerceptron::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void calcPerceptron::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void calcPerceptron::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(icmp_ln29_fu_217_p2.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage4_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_block_pp0_stage4_subdone.read(), ap_const_boolean_0) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read())))) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(icmp_ln29_fu_217_p2.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln29_fu_217_p2.read(), ap_const_lv1_1))) {
        i_0_reg_172 = ap_const_lv31_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(icmp_ln30_reg_333.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        i_0_reg_172 = i_reg_337.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        j_0_reg_136 = j_reg_328.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_0_reg_136 = ap_const_lv31_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        phi_mul_reg_148 = add_ln29_reg_314.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_mul_reg_148 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln29_fu_217_p2.read(), ap_const_lv1_1))) {
        sum_1_reg_160 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
                esl_seteq<1,1,1>(icmp_ln30_reg_333_pp0_iter1_reg.read(), ap_const_lv1_1))) {
        sum_1_reg_160 = grp_fu_183_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln29_reg_314 = add_ln29_fu_208_p2.read();
        j_reg_328 = j_fu_222_p2.read();
        zext_ln29_reg_319 = zext_ln29_fu_213_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        b_load_reg_377 = b_Dout_A.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        b_offset_read_reg_293 = b_offset.read();
        inputs_read_reg_308 = inputs.read();
        neurons_read_reg_303 = neurons.read();
        w_offset_read_reg_298 = w_offset.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        i_reg_337 = i_fu_237_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln30_reg_333 = icmp_ln30_fu_232_p2.read();
        icmp_ln30_reg_333_pp0_iter1_reg = icmp_ln30_reg_333.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()))) {
        reg_203 = grp_fu_183_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
        tmp_1_reg_392 = grp_fu_193_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        tmp_i_i_reg_387 = grp_fu_198_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln30_reg_333.read(), ap_const_lv1_1))) {
        tmp_reg_362 = grp_fu_189_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln30_reg_333.read(), ap_const_lv1_1))) {
        w_load_reg_357 = w_Dout_A.read();
        x_load_reg_352 = x_Dout_A.read();
    }
}

void calcPerceptron::thread_add_ln29_fu_208_p2() {
    add_ln29_fu_208_p2 = (!phi_mul_reg_148.read().is_01() || !inputs_read_reg_308.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_148.read()) + sc_biguint<32>(inputs_read_reg_308.read()));
}

void calcPerceptron::thread_add_ln31_1_fu_253_p2() {
    add_ln31_1_fu_253_p2 = (!add_ln31_fu_248_p2.read().is_01() || !phi_mul_reg_148.read().is_01())? sc_lv<32>(): (sc_biguint<32>(add_ln31_fu_248_p2.read()) + sc_biguint<32>(phi_mul_reg_148.read()));
}

void calcPerceptron::thread_add_ln31_fu_248_p2() {
    add_ln31_fu_248_p2 = (!i_0_cast_fu_228_p1.read().is_01() || !w_offset_read_reg_298.read().is_01())? sc_lv<32>(): (sc_biguint<32>(i_0_cast_fu_228_p1.read()) + sc_biguint<32>(w_offset_read_reg_298.read()));
}

void calcPerceptron::thread_add_ln33_fu_264_p2() {
    add_ln33_fu_264_p2 = (!zext_ln29_reg_319.read().is_01() || !b_offset_read_reg_293.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln29_reg_319.read()) + sc_biguint<32>(b_offset_read_reg_293.read()));
}

void calcPerceptron::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void calcPerceptron::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[3];
}

void calcPerceptron::thread_ap_CS_fsm_pp0_stage2() {
    ap_CS_fsm_pp0_stage2 = ap_CS_fsm.read()[4];
}

void calcPerceptron::thread_ap_CS_fsm_pp0_stage4() {
    ap_CS_fsm_pp0_stage4 = ap_CS_fsm.read()[6];
}

void calcPerceptron::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void calcPerceptron::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[7];
}

void calcPerceptron::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[8];
}

void calcPerceptron::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[9];
}

void calcPerceptron::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void calcPerceptron::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[13];
}

void calcPerceptron::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[14];
}

void calcPerceptron::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[22];
}

void calcPerceptron::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[23];
}

void calcPerceptron::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[27];
}

void calcPerceptron::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[28];
}

void calcPerceptron::thread_ap_CS_fsm_state44() {
    ap_CS_fsm_state44 = ap_CS_fsm.read()[37];
}

void calcPerceptron::thread_ap_CS_fsm_state45() {
    ap_CS_fsm_state45 = ap_CS_fsm.read()[38];
}

void calcPerceptron::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_pp0_stage2() {
    ap_block_pp0_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_pp0_stage2_11001() {
    ap_block_pp0_stage2_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_pp0_stage2_subdone() {
    ap_block_pp0_stage2_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_pp0_stage3_11001() {
    ap_block_pp0_stage3_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_pp0_stage3_subdone() {
    ap_block_pp0_stage3_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_pp0_stage4_11001() {
    ap_block_pp0_stage4_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_pp0_stage4_subdone() {
    ap_block_pp0_stage4_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_state10_pp0_stage2_iter1() {
    ap_block_state10_pp0_stage2_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_state11_pp0_stage3_iter1() {
    ap_block_state11_pp0_stage3_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_state12_pp0_stage4_iter1() {
    ap_block_state12_pp0_stage4_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_state13_pp0_stage0_iter2() {
    ap_block_state13_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_state4_pp0_stage1_iter0() {
    ap_block_state4_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_state5_pp0_stage2_iter0() {
    ap_block_state5_pp0_stage2_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_state6_pp0_stage3_iter0() {
    ap_block_state6_pp0_stage3_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_state7_pp0_stage4_iter0() {
    ap_block_state7_pp0_stage4_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_state8_pp0_stage0_iter1() {
    ap_block_state8_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_block_state9_pp0_stage1_iter1() {
    ap_block_state9_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void calcPerceptron::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(icmp_ln30_fu_232_p2.read(), ap_const_lv1_0)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void calcPerceptron::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln29_fu_217_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void calcPerceptron::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void calcPerceptron::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void calcPerceptron::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void calcPerceptron::thread_ap_phi_mux_i_0_phi_fu_176_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(icmp_ln30_reg_333.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_0_phi_fu_176_p4 = i_reg_337.read();
    } else {
        ap_phi_mux_i_0_phi_fu_176_p4 = i_0_reg_172.read();
    }
}

void calcPerceptron::thread_ap_phi_mux_sum_1_phi_fu_164_p4() {
    ap_phi_mux_sum_1_phi_fu_164_p4 = sum_1_reg_160.read();
}

void calcPerceptron::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln29_fu_217_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void calcPerceptron::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void calcPerceptron::thread_b_Addr_A() {
    b_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): b_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void calcPerceptron::thread_b_Addr_A_orig() {
    b_Addr_A_orig =  (sc_lv<32>) (sext_ln33_fu_268_p1.read());
}

void calcPerceptron::thread_b_Clk_A() {
    b_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void calcPerceptron::thread_b_Din_A() {
    b_Din_A = ap_const_lv32_0;
}

void calcPerceptron::thread_b_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        b_EN_A = ap_const_logic_1;
    } else {
        b_EN_A = ap_const_logic_0;
    }
}

void calcPerceptron::thread_b_Rst_A() {
    b_Rst_A = ap_rst_n_inv.read();
}

void calcPerceptron::thread_b_WEN_A() {
    b_WEN_A = ap_const_lv4_0;
}

void calcPerceptron::thread_bitcast_ln33_fu_273_p1() {
    bitcast_ln33_fu_273_p1 = reg_203.read();
}

void calcPerceptron::thread_grp_fu_183_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        grp_fu_183_p0 = tmp_i_i_reg_387.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        grp_fu_183_p0 = b_load_reg_377.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        grp_fu_183_p0 = tmp_reg_362.read();
    } else {
        grp_fu_183_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void calcPerceptron::thread_grp_fu_183_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        grp_fu_183_p1 = ap_const_lv32_3F800000;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        grp_fu_183_p1 = sum_1_reg_160.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        grp_fu_183_p1 = ap_phi_mux_sum_1_phi_fu_164_p4.read();
    } else {
        grp_fu_183_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void calcPerceptron::thread_grp_fu_198_p1() {
    grp_fu_198_p1 = xor_ln33_fu_277_p2.read();
}

void calcPerceptron::thread_i_0_cast_fu_228_p1() {
    i_0_cast_fu_228_p1 = esl_zext<32,31>(ap_phi_mux_i_0_phi_fu_176_p4.read());
}

void calcPerceptron::thread_i_fu_237_p2() {
    i_fu_237_p2 = (!ap_phi_mux_i_0_phi_fu_176_p4.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(ap_phi_mux_i_0_phi_fu_176_p4.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void calcPerceptron::thread_icmp_ln29_fu_217_p2() {
    icmp_ln29_fu_217_p2 = (!zext_ln29_fu_213_p1.read().is_01() || !neurons_read_reg_303.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln29_fu_213_p1.read()) < sc_bigint<32>(neurons_read_reg_303.read()));
}

void calcPerceptron::thread_icmp_ln30_fu_232_p2() {
    icmp_ln30_fu_232_p2 = (!i_0_cast_fu_228_p1.read().is_01() || !inputs_read_reg_308.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_0_cast_fu_228_p1.read()) < sc_bigint<32>(inputs_read_reg_308.read()));
}

void calcPerceptron::thread_j_fu_222_p2() {
    j_fu_222_p2 = (!j_0_reg_136.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(j_0_reg_136.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void calcPerceptron::thread_res_Addr_A() {
    res_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): res_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void calcPerceptron::thread_res_Addr_A_orig() {
    res_Addr_A_orig =  (sc_lv<32>) (zext_ln33_fu_288_p1.read());
}

void calcPerceptron::thread_res_Clk_A() {
    res_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void calcPerceptron::thread_res_Din_A() {
    res_Din_A = tmp_1_reg_392.read();
}

void calcPerceptron::thread_res_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        res_EN_A = ap_const_logic_1;
    } else {
        res_EN_A = ap_const_logic_0;
    }
}

void calcPerceptron::thread_res_Rst_A() {
    res_Rst_A = ap_rst_n_inv.read();
}

void calcPerceptron::thread_res_WEN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        res_WEN_A = ap_const_lv4_F;
    } else {
        res_WEN_A = ap_const_lv4_0;
    }
}

void calcPerceptron::thread_sext_ln31_fu_259_p1() {
    sext_ln31_fu_259_p1 = esl_sext<64,32>(add_ln31_1_fu_253_p2.read());
}

void calcPerceptron::thread_sext_ln33_fu_268_p1() {
    sext_ln33_fu_268_p1 = esl_sext<64,32>(add_ln33_fu_264_p2.read());
}

void calcPerceptron::thread_w_Addr_A() {
    w_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): w_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void calcPerceptron::thread_w_Addr_A_orig() {
    w_Addr_A_orig =  (sc_lv<32>) (sext_ln31_fu_259_p1.read());
}

void calcPerceptron::thread_w_Clk_A() {
    w_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void calcPerceptron::thread_w_Din_A() {
    w_Din_A = ap_const_lv32_0;
}

void calcPerceptron::thread_w_EN_A() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        w_EN_A = ap_const_logic_1;
    } else {
        w_EN_A = ap_const_logic_0;
    }
}

void calcPerceptron::thread_w_Rst_A() {
    w_Rst_A = ap_rst_n_inv.read();
}

void calcPerceptron::thread_w_WEN_A() {
    w_WEN_A = ap_const_lv4_0;
}

void calcPerceptron::thread_x_Addr_A() {
    x_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): x_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void calcPerceptron::thread_x_Addr_A_orig() {
    x_Addr_A_orig =  (sc_lv<32>) (zext_ln31_fu_243_p1.read());
}

void calcPerceptron::thread_x_Clk_A() {
    x_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void calcPerceptron::thread_x_Din_A() {
    x_Din_A = ap_const_lv32_0;
}

void calcPerceptron::thread_x_EN_A() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        x_EN_A = ap_const_logic_1;
    } else {
        x_EN_A = ap_const_logic_0;
    }
}

void calcPerceptron::thread_x_Rst_A() {
    x_Rst_A = ap_rst_n_inv.read();
}

void calcPerceptron::thread_x_WEN_A() {
    x_WEN_A = ap_const_lv4_0;
}

void calcPerceptron::thread_xor_ln33_fu_277_p2() {
    xor_ln33_fu_277_p2 = (bitcast_ln33_fu_273_p1.read() ^ ap_const_lv32_80000000);
}

void calcPerceptron::thread_zext_ln29_fu_213_p1() {
    zext_ln29_fu_213_p1 = esl_zext<32,31>(j_0_reg_136.read());
}

void calcPerceptron::thread_zext_ln31_fu_243_p1() {
    zext_ln31_fu_243_p1 = esl_zext<64,31>(ap_phi_mux_i_0_phi_fu_176_p4.read());
}

void calcPerceptron::thread_zext_ln33_fu_288_p1() {
    zext_ln33_fu_288_p1 = esl_zext<64,31>(j_0_reg_136.read());
}

void calcPerceptron::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln29_fu_217_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln30_fu_232_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln30_fu_232_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 16 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            }
            break;
        case 32 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            }
            break;
        case 64 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage4_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<39>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void calcPerceptron::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"x_Addr_A\" :  \"" << x_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_EN_A\" :  \"" << x_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_WEN_A\" :  \"" << x_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_Din_A\" :  \"" << x_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_Dout_A\" :  \"" << x_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_Clk_A\" :  \"" << x_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"x_Rst_A\" :  \"" << x_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"w_Addr_A\" :  \"" << w_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"w_EN_A\" :  \"" << w_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"w_WEN_A\" :  \"" << w_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"w_Din_A\" :  \"" << w_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"w_Dout_A\" :  \"" << w_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"w_Clk_A\" :  \"" << w_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"w_Rst_A\" :  \"" << w_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_Addr_A\" :  \"" << b_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_EN_A\" :  \"" << b_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_WEN_A\" :  \"" << b_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_Din_A\" :  \"" << b_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_Dout_A\" :  \"" << b_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_Clk_A\" :  \"" << b_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_Rst_A\" :  \"" << b_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_Addr_A\" :  \"" << res_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_EN_A\" :  \"" << res_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_WEN_A\" :  \"" << res_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_Din_A\" :  \"" << res_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"res_Dout_A\" :  \"" << res_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_Clk_A\" :  \"" << res_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_Rst_A\" :  \"" << res_Rst_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWVALID\" :  \"" << s_axi_CTRL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_AWREADY\" :  \"" << s_axi_CTRL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWADDR\" :  \"" << s_axi_CTRL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WVALID\" :  \"" << s_axi_CTRL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_WREADY\" :  \"" << s_axi_CTRL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WDATA\" :  \"" << s_axi_CTRL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WSTRB\" :  \"" << s_axi_CTRL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARVALID\" :  \"" << s_axi_CTRL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_ARREADY\" :  \"" << s_axi_CTRL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARADDR\" :  \"" << s_axi_CTRL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RVALID\" :  \"" << s_axi_CTRL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_RREADY\" :  \"" << s_axi_CTRL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RDATA\" :  \"" << s_axi_CTRL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RRESP\" :  \"" << s_axi_CTRL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BVALID\" :  \"" << s_axi_CTRL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_BREADY\" :  \"" << s_axi_CTRL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BRESP\" :  \"" << s_axi_CTRL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

