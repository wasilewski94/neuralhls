// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="calcPerceptron,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.677000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=2194,HLS_SYN_LUT=3510,HLS_VERSION=2019_2}" *)

module calcPerceptron (
        ap_clk,
        ap_rst_n,
        x_Addr_A,
        x_EN_A,
        x_WEN_A,
        x_Din_A,
        x_Dout_A,
        x_Clk_A,
        x_Rst_A,
        w_Addr_A,
        w_EN_A,
        w_WEN_A,
        w_Din_A,
        w_Dout_A,
        w_Clk_A,
        w_Rst_A,
        b_Addr_A,
        b_EN_A,
        b_WEN_A,
        b_Din_A,
        b_Dout_A,
        b_Clk_A,
        b_Rst_A,
        res_Addr_A,
        res_EN_A,
        res_WEN_A,
        res_Din_A,
        res_Dout_A,
        res_Clk_A,
        res_Rst_A,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 49'd1;
parameter    ap_ST_fsm_state2 = 49'd2;
parameter    ap_ST_fsm_state3 = 49'd4;
parameter    ap_ST_fsm_state4 = 49'd8;
parameter    ap_ST_fsm_state5 = 49'd16;
parameter    ap_ST_fsm_state6 = 49'd32;
parameter    ap_ST_fsm_state7 = 49'd64;
parameter    ap_ST_fsm_state8 = 49'd128;
parameter    ap_ST_fsm_state9 = 49'd256;
parameter    ap_ST_fsm_state10 = 49'd512;
parameter    ap_ST_fsm_state11 = 49'd1024;
parameter    ap_ST_fsm_state12 = 49'd2048;
parameter    ap_ST_fsm_state13 = 49'd4096;
parameter    ap_ST_fsm_state14 = 49'd8192;
parameter    ap_ST_fsm_state15 = 49'd16384;
parameter    ap_ST_fsm_state16 = 49'd32768;
parameter    ap_ST_fsm_state17 = 49'd65536;
parameter    ap_ST_fsm_state18 = 49'd131072;
parameter    ap_ST_fsm_state19 = 49'd262144;
parameter    ap_ST_fsm_state20 = 49'd524288;
parameter    ap_ST_fsm_state21 = 49'd1048576;
parameter    ap_ST_fsm_state22 = 49'd2097152;
parameter    ap_ST_fsm_state23 = 49'd4194304;
parameter    ap_ST_fsm_state24 = 49'd8388608;
parameter    ap_ST_fsm_state25 = 49'd16777216;
parameter    ap_ST_fsm_state26 = 49'd33554432;
parameter    ap_ST_fsm_state27 = 49'd67108864;
parameter    ap_ST_fsm_state28 = 49'd134217728;
parameter    ap_ST_fsm_state29 = 49'd268435456;
parameter    ap_ST_fsm_state30 = 49'd536870912;
parameter    ap_ST_fsm_state31 = 49'd1073741824;
parameter    ap_ST_fsm_state32 = 49'd2147483648;
parameter    ap_ST_fsm_state33 = 49'd4294967296;
parameter    ap_ST_fsm_state34 = 49'd8589934592;
parameter    ap_ST_fsm_state35 = 49'd17179869184;
parameter    ap_ST_fsm_state36 = 49'd34359738368;
parameter    ap_ST_fsm_state37 = 49'd68719476736;
parameter    ap_ST_fsm_state38 = 49'd137438953472;
parameter    ap_ST_fsm_state39 = 49'd274877906944;
parameter    ap_ST_fsm_state40 = 49'd549755813888;
parameter    ap_ST_fsm_state41 = 49'd1099511627776;
parameter    ap_ST_fsm_state42 = 49'd2199023255552;
parameter    ap_ST_fsm_state43 = 49'd4398046511104;
parameter    ap_ST_fsm_state44 = 49'd8796093022208;
parameter    ap_ST_fsm_state45 = 49'd17592186044416;
parameter    ap_ST_fsm_state46 = 49'd35184372088832;
parameter    ap_ST_fsm_state47 = 49'd70368744177664;
parameter    ap_ST_fsm_state48 = 49'd140737488355328;
parameter    ap_ST_fsm_state49 = 49'd281474976710656;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] x_Addr_A;
output   x_EN_A;
output  [3:0] x_WEN_A;
output  [31:0] x_Din_A;
input  [31:0] x_Dout_A;
output   x_Clk_A;
output   x_Rst_A;
output  [31:0] w_Addr_A;
output   w_EN_A;
output  [3:0] w_WEN_A;
output  [31:0] w_Din_A;
input  [31:0] w_Dout_A;
output   w_Clk_A;
output   w_Rst_A;
output  [31:0] b_Addr_A;
output   b_EN_A;
output  [3:0] b_WEN_A;
output  [31:0] b_Din_A;
input  [31:0] b_Dout_A;
output   b_Clk_A;
output   b_Rst_A;
output  [31:0] res_Addr_A;
output   res_EN_A;
output  [3:0] res_WEN_A;
output  [31:0] res_Din_A;
input  [31:0] res_Dout_A;
output   res_Clk_A;
output   res_Rst_A;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

reg x_EN_A;
reg w_EN_A;
reg b_EN_A;
reg res_EN_A;
reg[3:0] res_WEN_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [48:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] inputs;
wire   [31:0] neurons;
wire   [31:0] w_offset;
wire   [31:0] b_offset;
wire   [31:0] grp_fu_173_p2;
reg   [31:0] reg_194;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state33;
reg   [31:0] b_offset_read_reg_284;
reg   [31:0] w_offset_read_reg_289;
reg   [31:0] neurons_read_reg_294;
reg   [31:0] inputs_read_reg_299;
wire   [31:0] add_ln21_fu_199_p2;
reg   [31:0] add_ln21_reg_305;
wire    ap_CS_fsm_state2;
wire   [31:0] zext_ln21_fu_204_p1;
reg   [31:0] zext_ln21_reg_310;
wire   [30:0] j_fu_213_p2;
reg   [30:0] j_reg_318;
wire   [30:0] i_fu_228_p2;
reg   [30:0] i_reg_326;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln22_fu_223_p2;
reg   [31:0] x_load_reg_346;
wire    ap_CS_fsm_state4;
reg   [31:0] w_load_reg_351;
wire   [31:0] grp_fu_179_p2;
reg   [31:0] tmp_reg_356;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state13;
reg   [31:0] b_load_reg_366;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state20;
wire   [31:0] grp_fu_189_p2;
reg   [31:0] tmp_i_i_reg_376;
wire    ap_CS_fsm_state28;
reg   [30:0] j_0_reg_126;
wire    ap_CS_fsm_state49;
reg   [31:0] phi_mul_reg_138;
reg   [31:0] sum_1_reg_150;
wire   [0:0] icmp_ln21_fu_208_p2;
reg   [30:0] i_0_reg_162;
wire   [63:0] zext_ln23_fu_234_p1;
wire  signed [63:0] sext_ln23_fu_250_p1;
wire  signed [63:0] sext_ln25_fu_259_p1;
wire   [63:0] zext_ln25_fu_279_p1;
wire   [31:0] x_Addr_A_orig;
wire   [31:0] w_Addr_A_orig;
wire   [31:0] b_Addr_A_orig;
wire   [31:0] grp_fu_183_p2;
wire   [31:0] res_Addr_A_orig;
reg   [31:0] grp_fu_173_p0;
reg   [31:0] grp_fu_173_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state34;
wire   [31:0] grp_fu_189_p1;
wire   [31:0] zext_ln22_fu_219_p1;
wire   [31:0] add_ln23_fu_239_p2;
wire   [31:0] add_ln23_1_fu_244_p2;
wire   [31:0] add_ln25_fu_255_p2;
wire   [31:0] bitcast_ln25_fu_264_p1;
wire   [31:0] xor_ln25_fu_268_p2;
reg   [48:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 49'd1;
end

calcPerceptron_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
calcPerceptron_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .inputs(inputs),
    .neurons(neurons),
    .w_offset(w_offset),
    .b_offset(b_offset)
);

calcPerceptron_fabkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
calcPerceptron_fabkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_173_p0),
    .din1(grp_fu_173_p1),
    .ce(1'b1),
    .dout(grp_fu_173_p2)
);

calcPerceptron_fmcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
calcPerceptron_fmcud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x_load_reg_346),
    .din1(w_load_reg_351),
    .ce(1'b1),
    .dout(grp_fu_179_p2)
);

calcPerceptron_fddEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
calcPerceptron_fddEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd1065353216),
    .din1(reg_194),
    .ce(1'b1),
    .dout(grp_fu_183_p2)
);

calcPerceptron_feeOg #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
calcPerceptron_feeOg_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(grp_fu_189_p1),
    .ce(1'b1),
    .dout(grp_fu_189_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln21_fu_208_p2 == 1'd1))) begin
        i_0_reg_162 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i_0_reg_162 <= i_reg_326;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        j_0_reg_126 <= j_reg_318;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_126 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        phi_mul_reg_138 <= add_ln21_reg_305;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_138 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln21_fu_208_p2 == 1'd1))) begin
        sum_1_reg_150 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        sum_1_reg_150 <= grp_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln21_reg_305 <= add_ln21_fu_199_p2;
        j_reg_318 <= j_fu_213_p2;
        zext_ln21_reg_310[30 : 0] <= zext_ln21_fu_204_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        b_load_reg_366 <= b_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_offset_read_reg_284 <= b_offset;
        inputs_read_reg_299 <= inputs;
        neurons_read_reg_294 <= neurons;
        w_offset_read_reg_289 <= w_offset;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_326 <= i_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_194 <= grp_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_i_i_reg_376 <= grp_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_reg_356 <= grp_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_load_reg_351 <= w_Dout_A;
        x_load_reg_346 <= x_Dout_A;
    end
end

always @ (*) begin
    if (((icmp_ln21_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_EN_A = 1'b1;
    end else begin
        b_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_173_p0 = tmp_i_i_reg_376;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_173_p0 = sum_1_reg_150;
    end else begin
        grp_fu_173_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_173_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_173_p1 = b_load_reg_366;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_173_p1 = tmp_reg_356;
    end else begin
        grp_fu_173_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        res_EN_A = 1'b1;
    end else begin
        res_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        res_WEN_A = 4'd15;
    end else begin
        res_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        w_EN_A = 1'b1;
    end else begin
        w_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_EN_A = 1'b1;
    end else begin
        x_EN_A = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln21_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln22_fu_223_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_fu_199_p2 = (phi_mul_reg_138 + inputs_read_reg_299);

assign add_ln23_1_fu_244_p2 = (add_ln23_fu_239_p2 + phi_mul_reg_138);

assign add_ln23_fu_239_p2 = (zext_ln22_fu_219_p1 + w_offset_read_reg_289);

assign add_ln25_fu_255_p2 = (zext_ln21_reg_310 + b_offset_read_reg_284);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_Addr_A = b_Addr_A_orig << 32'd2;

assign b_Addr_A_orig = sext_ln25_fu_259_p1;

assign b_Clk_A = ap_clk;

assign b_Din_A = 32'd0;

assign b_Rst_A = ap_rst_n_inv;

assign b_WEN_A = 4'd0;

assign bitcast_ln25_fu_264_p1 = reg_194;

assign grp_fu_189_p1 = xor_ln25_fu_268_p2;

assign i_fu_228_p2 = (i_0_reg_162 + 31'd1);

assign icmp_ln21_fu_208_p2 = (($signed(zext_ln21_fu_204_p1) < $signed(neurons_read_reg_294)) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_223_p2 = (($signed(zext_ln22_fu_219_p1) < $signed(inputs_read_reg_299)) ? 1'b1 : 1'b0);

assign j_fu_213_p2 = (j_0_reg_126 + 31'd1);

assign res_Addr_A = res_Addr_A_orig << 32'd2;

assign res_Addr_A_orig = zext_ln25_fu_279_p1;

assign res_Clk_A = ap_clk;

assign res_Din_A = grp_fu_183_p2;

assign res_Rst_A = ap_rst_n_inv;

assign sext_ln23_fu_250_p1 = $signed(add_ln23_1_fu_244_p2);

assign sext_ln25_fu_259_p1 = $signed(add_ln25_fu_255_p2);

assign w_Addr_A = w_Addr_A_orig << 32'd2;

assign w_Addr_A_orig = sext_ln23_fu_250_p1;

assign w_Clk_A = ap_clk;

assign w_Din_A = 32'd0;

assign w_Rst_A = ap_rst_n_inv;

assign w_WEN_A = 4'd0;

assign x_Addr_A = x_Addr_A_orig << 32'd2;

assign x_Addr_A_orig = zext_ln23_fu_234_p1;

assign x_Clk_A = ap_clk;

assign x_Din_A = 32'd0;

assign x_Rst_A = ap_rst_n_inv;

assign x_WEN_A = 4'd0;

assign xor_ln25_fu_268_p2 = (bitcast_ln25_fu_264_p1 ^ 32'd2147483648);

assign zext_ln21_fu_204_p1 = j_0_reg_126;

assign zext_ln22_fu_219_p1 = i_0_reg_162;

assign zext_ln23_fu_234_p1 = i_0_reg_162;

assign zext_ln25_fu_279_p1 = j_0_reg_126;

always @ (posedge ap_clk) begin
    zext_ln21_reg_310[31] <= 1'b0;
end

endmodule //calcPerceptron
