-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity exp_generic_decimal16_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of exp_generic_decimal16_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv15_4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_7C00 : STD_LOGIC_VECTOR (15 downto 0) := "0111110000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_72 : STD_LOGIC_VECTOR (6 downto 0) := "1110010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv19_171 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000101110001";
    constant ap_const_lv26_58B90 : STD_LOGIC_VECTOR (25 downto 0) := "00000001011000101110010000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal table_exp_Z1_ap_ufixed_14_1_ap_q_mode_5_ap_o_mode_3_0_array_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal table_exp_Z1_ap_ufixed_14_1_ap_q_mode_5_ap_o_mode_3_0_array_V_ce0 : STD_LOGIC;
    signal table_exp_Z1_ap_ufixed_14_1_ap_q_mode_5_ap_o_mode_3_0_array_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_12_fu_153_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_reg_806 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_reg_806_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_reg_806_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_reg_806_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_reg_806_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_reg_806_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_reg_806_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_reg_806_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_reg_806_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_reg_806_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln209_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln209_reg_811 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln209_reg_811_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln209_reg_811_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln209_reg_811_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln209_reg_811_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln209_reg_811_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln209_reg_811_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln209_reg_811_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln209_reg_811_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln209_reg_811_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_reg_818 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_reg_818_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_reg_818_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_reg_818_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_reg_818_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_reg_818_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_reg_818_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_reg_818_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_reg_818_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_reg_818_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln253_fu_229_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln253_reg_824 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln253_reg_824_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln253_reg_824_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln253_reg_824_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln253_reg_824_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln253_reg_824_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln253_reg_824_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln253_reg_824_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln253_reg_824_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln253_reg_824_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal m_frac_l_V_fu_237_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal m_frac_l_V_reg_829 : STD_LOGIC_VECTOR (14 downto 0);
    signal isNeg_fu_245_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_834 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_exp_2_fu_263_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_exp_2_reg_839 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1311_2_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_2_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_6_fu_303_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_6_reg_849 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_6_reg_849_pp0_iter1_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_6_reg_849_pp0_iter2_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_6_reg_849_pp0_iter3_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_6_reg_849_pp0_iter4_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_6_reg_849_pp0_iter5_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal m_fix_l_V_reg_854 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_13_reg_860 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_13_reg_860_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_reg_870 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_reg_870_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_reg_870_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_reg_870_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_reg_870_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_reg_870_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_reg_870_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_reg_870_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_reg_870_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_reg_870_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_1_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_1_reg_878 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_1_reg_878_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_1_reg_878_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_1_reg_878_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_1_reg_878_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_1_reg_878_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_1_reg_878_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_1_reg_878_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln338_1_reg_878_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal r_exp_V_3_fu_439_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_exp_V_3_reg_888 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_exp_V_3_reg_888_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal r_exp_V_3_reg_888_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal r_exp_V_3_reg_888_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal r_exp_V_3_reg_888_pp0_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal r_exp_V_3_reg_888_pp0_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal r_exp_V_3_reg_888_pp0_iter9_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal m_diff_lo_V_fu_491_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_diff_lo_V_reg_899 : STD_LOGIC_VECTOR (3 downto 0);
    signal exp_Z1_V_reg_909 : STD_LOGIC_VECTOR (13 downto 0);
    signal exp_Z1_V_reg_909_pp0_iter8_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln498_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_149_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_fu_161_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_1_fu_171_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln833_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln837_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_1_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln659_fu_205_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_s_fu_215_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal e_frac_V_fu_223_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal m_exp_fu_209_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1311_fu_253_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln1311_fu_259_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1311_3_fu_275_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ashr_ln1287_fu_283_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln1287_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1253_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1287_1_fu_289_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln1310_fu_299_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal m_fix_hi_V_fu_321_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1311_2cast_fu_355_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1311_1_fu_349_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1253_1_fu_358_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ashr_ln1287_1_fu_363_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1322_fu_368_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_375_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1285_fu_352_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_fu_389_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_777_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln805_fu_416_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_400_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln805_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln805_fu_425_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_7_fu_409_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln805_fu_431_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_788_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_4_fu_454_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_1_fu_463_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal lhs_V_fu_451_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln682_1_fu_471_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal ret_V_3_fu_475_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal m_diff_hi_V_fu_481_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal exp_Z1_hi_V_fu_500_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_V_1_fu_517_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_4_fu_520_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln936_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_is_pinf_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln214_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln214_fu_549_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_795_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_9_fu_568_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_exp_V_fu_575_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_exp_V_2_fu_580_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_587_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln849_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_608_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_638_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_629_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln168_fu_655_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_exp_V_fu_659_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_2_fu_647_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_14_fu_665_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln214_1_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln338_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln338_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln338_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln849_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln849_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln214_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln339_fu_615_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln667_fu_675_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln214_1_fu_560_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp6_fu_713_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln338_1_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln849_1_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln338_1_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln849_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln849_2_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln853_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp16_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln214_2_fu_721_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_777_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_788_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_795_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_795_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_795_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to9 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_795_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_795_p10 : STD_LOGIC_VECTOR (8 downto 0);

    component calcPerceptron_mac_muladd_10ns_10s_13s_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component calcPerceptron_mul_mul_20ns_7s_26_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component calcPerceptron_mac_muladd_4ns_5ns_19ns_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component exp_generic_decimal16_s_table_exp_Z1_ap_ufixed_14_1_ap_q_mode_5_ap_o_mode_3_0bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    table_exp_Z1_ap_ufixed_14_1_ap_q_mode_5_ap_o_mode_3_0_array_V_U : component exp_generic_decimal16_s_table_exp_Z1_ap_ufixed_14_1_ap_q_mode_5_ap_o_mode_3_0bkb
    generic map (
        DataWidth => 14,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => table_exp_Z1_ap_ufixed_14_1_ap_q_mode_5_ap_o_mode_3_0_array_V_address0,
        ce0 => table_exp_Z1_ap_ufixed_14_1_ap_q_mode_5_ap_o_mode_3_0_array_V_ce0,
        q0 => table_exp_Z1_ap_ufixed_14_1_ap_q_mode_5_ap_o_mode_3_0_array_V_q0);

    calcPerceptron_mac_muladd_10ns_10s_13s_19_4_1_U1 : component calcPerceptron_mac_muladd_10ns_10s_13s_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 13,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_777_p0,
        din1 => m_fix_hi_V_fu_321_p4,
        din2 => rhs_V_fu_389_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_777_p3);

    calcPerceptron_mul_mul_20ns_7s_26_4_1_U2 : component calcPerceptron_mul_mul_20ns_7s_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 20,
        din1_WIDTH => 7,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_788_p0,
        din1 => r_exp_V_3_fu_439_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_788_p2);

    calcPerceptron_mac_muladd_4ns_5ns_19ns_19_4_1_U3 : component calcPerceptron_mac_muladd_4ns_5ns_19ns_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 19,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_795_p0,
        din1 => grp_fu_795_p1,
        din2 => grp_fu_795_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_795_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln18_reg_818 <= and_ln18_fu_199_p2;
                and_ln18_reg_818_pp0_iter1_reg <= and_ln18_reg_818;
                and_ln209_reg_811 <= and_ln209_fu_187_p2;
                and_ln209_reg_811_pp0_iter1_reg <= and_ln209_reg_811;
                icmp_ln338_1_reg_878 <= icmp_ln338_1_fu_383_p2;
                icmp_ln338_reg_870 <= icmp_ln338_fu_343_p2;
                icmp_ln338_reg_870_pp0_iter1_reg <= icmp_ln338_reg_870;
                isNeg_reg_834 <= m_exp_fu_209_p2(5 downto 5);
                m_exp_2_reg_839 <= m_exp_2_fu_263_p3;
                m_fix_l_V_reg_854 <= r_V_6_fu_303_p3(18 downto 3);
                    m_frac_l_V_reg_829(14 downto 3) <= m_frac_l_V_fu_237_p3(14 downto 3);
                p_Result_12_reg_806 <= p_Val2_s_fu_149_p1(15 downto 15);
                p_Result_12_reg_806_pp0_iter1_reg <= p_Result_12_reg_806;
                p_Result_13_reg_860 <= r_V_6_fu_303_p3(18 downto 18);
                p_Result_13_reg_860_pp0_iter1_reg <= p_Result_13_reg_860;
                r_V_6_reg_849 <= r_V_6_fu_303_p3;
                r_V_6_reg_849_pp0_iter1_reg <= r_V_6_reg_849;
                select_ln253_reg_824 <= select_ln253_fu_229_p3;
                select_ln253_reg_824_pp0_iter1_reg <= select_ln253_reg_824;
                sext_ln1311_2_reg_844 <= sext_ln1311_2_fu_271_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln18_reg_818_pp0_iter2_reg <= and_ln18_reg_818_pp0_iter1_reg;
                and_ln18_reg_818_pp0_iter3_reg <= and_ln18_reg_818_pp0_iter2_reg;
                and_ln18_reg_818_pp0_iter4_reg <= and_ln18_reg_818_pp0_iter3_reg;
                and_ln18_reg_818_pp0_iter5_reg <= and_ln18_reg_818_pp0_iter4_reg;
                and_ln18_reg_818_pp0_iter6_reg <= and_ln18_reg_818_pp0_iter5_reg;
                and_ln18_reg_818_pp0_iter7_reg <= and_ln18_reg_818_pp0_iter6_reg;
                and_ln18_reg_818_pp0_iter8_reg <= and_ln18_reg_818_pp0_iter7_reg;
                and_ln18_reg_818_pp0_iter9_reg <= and_ln18_reg_818_pp0_iter8_reg;
                and_ln209_reg_811_pp0_iter2_reg <= and_ln209_reg_811_pp0_iter1_reg;
                and_ln209_reg_811_pp0_iter3_reg <= and_ln209_reg_811_pp0_iter2_reg;
                and_ln209_reg_811_pp0_iter4_reg <= and_ln209_reg_811_pp0_iter3_reg;
                and_ln209_reg_811_pp0_iter5_reg <= and_ln209_reg_811_pp0_iter4_reg;
                and_ln209_reg_811_pp0_iter6_reg <= and_ln209_reg_811_pp0_iter5_reg;
                and_ln209_reg_811_pp0_iter7_reg <= and_ln209_reg_811_pp0_iter6_reg;
                and_ln209_reg_811_pp0_iter8_reg <= and_ln209_reg_811_pp0_iter7_reg;
                and_ln209_reg_811_pp0_iter9_reg <= and_ln209_reg_811_pp0_iter8_reg;
                exp_Z1_V_reg_909 <= table_exp_Z1_ap_ufixed_14_1_ap_q_mode_5_ap_o_mode_3_0_array_V_q0;
                exp_Z1_V_reg_909_pp0_iter8_reg <= exp_Z1_V_reg_909;
                icmp_ln338_1_reg_878_pp0_iter2_reg <= icmp_ln338_1_reg_878;
                icmp_ln338_1_reg_878_pp0_iter3_reg <= icmp_ln338_1_reg_878_pp0_iter2_reg;
                icmp_ln338_1_reg_878_pp0_iter4_reg <= icmp_ln338_1_reg_878_pp0_iter3_reg;
                icmp_ln338_1_reg_878_pp0_iter5_reg <= icmp_ln338_1_reg_878_pp0_iter4_reg;
                icmp_ln338_1_reg_878_pp0_iter6_reg <= icmp_ln338_1_reg_878_pp0_iter5_reg;
                icmp_ln338_1_reg_878_pp0_iter7_reg <= icmp_ln338_1_reg_878_pp0_iter6_reg;
                icmp_ln338_1_reg_878_pp0_iter8_reg <= icmp_ln338_1_reg_878_pp0_iter7_reg;
                icmp_ln338_1_reg_878_pp0_iter9_reg <= icmp_ln338_1_reg_878_pp0_iter8_reg;
                icmp_ln338_reg_870_pp0_iter2_reg <= icmp_ln338_reg_870_pp0_iter1_reg;
                icmp_ln338_reg_870_pp0_iter3_reg <= icmp_ln338_reg_870_pp0_iter2_reg;
                icmp_ln338_reg_870_pp0_iter4_reg <= icmp_ln338_reg_870_pp0_iter3_reg;
                icmp_ln338_reg_870_pp0_iter5_reg <= icmp_ln338_reg_870_pp0_iter4_reg;
                icmp_ln338_reg_870_pp0_iter6_reg <= icmp_ln338_reg_870_pp0_iter5_reg;
                icmp_ln338_reg_870_pp0_iter7_reg <= icmp_ln338_reg_870_pp0_iter6_reg;
                icmp_ln338_reg_870_pp0_iter8_reg <= icmp_ln338_reg_870_pp0_iter7_reg;
                icmp_ln338_reg_870_pp0_iter9_reg <= icmp_ln338_reg_870_pp0_iter8_reg;
                m_diff_lo_V_reg_899 <= m_diff_lo_V_fu_491_p1;
                p_Result_12_reg_806_pp0_iter2_reg <= p_Result_12_reg_806_pp0_iter1_reg;
                p_Result_12_reg_806_pp0_iter3_reg <= p_Result_12_reg_806_pp0_iter2_reg;
                p_Result_12_reg_806_pp0_iter4_reg <= p_Result_12_reg_806_pp0_iter3_reg;
                p_Result_12_reg_806_pp0_iter5_reg <= p_Result_12_reg_806_pp0_iter4_reg;
                p_Result_12_reg_806_pp0_iter6_reg <= p_Result_12_reg_806_pp0_iter5_reg;
                p_Result_12_reg_806_pp0_iter7_reg <= p_Result_12_reg_806_pp0_iter6_reg;
                p_Result_12_reg_806_pp0_iter8_reg <= p_Result_12_reg_806_pp0_iter7_reg;
                p_Result_12_reg_806_pp0_iter9_reg <= p_Result_12_reg_806_pp0_iter8_reg;
                r_V_6_reg_849_pp0_iter2_reg <= r_V_6_reg_849_pp0_iter1_reg;
                r_V_6_reg_849_pp0_iter3_reg <= r_V_6_reg_849_pp0_iter2_reg;
                r_V_6_reg_849_pp0_iter4_reg <= r_V_6_reg_849_pp0_iter3_reg;
                r_V_6_reg_849_pp0_iter5_reg <= r_V_6_reg_849_pp0_iter4_reg;
                r_exp_V_3_reg_888 <= r_exp_V_3_fu_439_p3;
                r_exp_V_3_reg_888_pp0_iter4_reg <= r_exp_V_3_reg_888;
                r_exp_V_3_reg_888_pp0_iter5_reg <= r_exp_V_3_reg_888_pp0_iter4_reg;
                r_exp_V_3_reg_888_pp0_iter6_reg <= r_exp_V_3_reg_888_pp0_iter5_reg;
                r_exp_V_3_reg_888_pp0_iter7_reg <= r_exp_V_3_reg_888_pp0_iter6_reg;
                r_exp_V_3_reg_888_pp0_iter8_reg <= r_exp_V_3_reg_888_pp0_iter7_reg;
                r_exp_V_3_reg_888_pp0_iter9_reg <= r_exp_V_3_reg_888_pp0_iter8_reg;
                select_ln253_reg_824_pp0_iter2_reg <= select_ln253_reg_824_pp0_iter1_reg;
                select_ln253_reg_824_pp0_iter3_reg <= select_ln253_reg_824_pp0_iter2_reg;
                select_ln253_reg_824_pp0_iter4_reg <= select_ln253_reg_824_pp0_iter3_reg;
                select_ln253_reg_824_pp0_iter5_reg <= select_ln253_reg_824_pp0_iter4_reg;
                select_ln253_reg_824_pp0_iter6_reg <= select_ln253_reg_824_pp0_iter5_reg;
                select_ln253_reg_824_pp0_iter7_reg <= select_ln253_reg_824_pp0_iter6_reg;
                select_ln253_reg_824_pp0_iter8_reg <= select_ln253_reg_824_pp0_iter7_reg;
                select_ln253_reg_824_pp0_iter9_reg <= select_ln253_reg_824_pp0_iter8_reg;
            end if;
        end if;
    end process;
    m_frac_l_V_reg_829(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln805_fu_425_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(tmp_1_fu_400_p4));
    and_ln18_fu_199_p2 <= (icmp_ln833_fu_175_p2 and icmp_ln833_1_fu_193_p2);
    and_ln209_fu_187_p2 <= (icmp_ln837_fu_181_p2 and icmp_ln833_fu_175_p2);
    and_ln338_1_fu_735_p2 <= (xor_ln338_1_fu_729_p2 and icmp_ln338_reg_870_pp0_iter9_reg);
    and_ln338_fu_685_p2 <= (or_ln338_fu_603_p2 and icmp_ln338_reg_870_pp0_iter9_reg);
    and_ln849_fu_695_p2 <= (xor_ln338_fu_690_p2 and icmp_ln849_fu_597_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to9_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to9 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to9)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv16_0 when (sel_tmp16_fu_763_p2(0) = '1') else 
        select_ln214_2_fu_721_p3;
    ashr_ln1287_1_fu_363_p2 <= std_logic_vector(shift_right(signed(m_fix_l_V_reg_854),to_integer(unsigned('0' & sext_ln1311_1_fu_349_p1(16-1 downto 0)))));
    ashr_ln1287_fu_283_p2 <= std_logic_vector(shift_right(signed(m_frac_l_V_fu_237_p3),to_integer(unsigned('0' & sext_ln1311_3_fu_275_p1(15-1 downto 0)))));
    bitcast_ln667_fu_675_p1 <= p_Result_14_fu_665_p4;
    e_frac_V_fu_223_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(p_Result_s_fu_215_p3));
    exp_Z1_hi_V_fu_500_p4 <= table_exp_Z1_ap_ufixed_14_1_ap_q_mode_5_ap_o_mode_3_0_array_V_q0(13 downto 9);
    grp_fu_777_p0 <= ap_const_lv19_171(10 - 1 downto 0);
    grp_fu_788_p0 <= ap_const_lv26_58B90(20 - 1 downto 0);
    grp_fu_795_p0 <= grp_fu_795_p00(4 - 1 downto 0);
    grp_fu_795_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_diff_lo_V_reg_899),9));
    grp_fu_795_p1 <= grp_fu_795_p10(5 - 1 downto 0);
    grp_fu_795_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_Z1_hi_V_fu_500_p4),9));
    grp_fu_795_p2 <= (ret_V_4_fu_520_p2 & ap_const_lv4_0);
    icmp_ln338_1_fu_383_p2 <= "0" when (shl_ln_fu_375_p3 = sext_ln1285_fu_352_p1) else "1";
    icmp_ln338_fu_343_p2 <= "1" when (signed(m_exp_fu_209_p2) > signed(ap_const_lv6_0)) else "0";
    icmp_ln805_fu_419_p2 <= "1" when (trunc_ln805_fu_416_p1 = ap_const_lv12_0) else "0";
    icmp_ln833_1_fu_193_p2 <= "1" when (tmp_V_1_fu_171_p1 = ap_const_lv10_0) else "0";
    icmp_ln833_fu_175_p2 <= "1" when (tmp_V_fu_161_p4 = ap_const_lv5_1F) else "0";
    icmp_ln837_fu_181_p2 <= "0" when (tmp_V_1_fu_171_p1 = ap_const_lv10_0) else "1";
    icmp_ln849_fu_597_p2 <= "1" when (signed(tmp_10_fu_587_p4) > signed(ap_const_lv3_0)) else "0";
    icmp_ln853_fu_623_p2 <= "1" when (signed(r_exp_V_2_fu_580_p3) < signed(ap_const_lv7_72)) else "0";
    isNeg_fu_245_p3 <= m_exp_fu_209_p2(5 downto 5);
    lhs_V_1_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_Z1_V_reg_909_pp0_iter8_reg),15));
        lhs_V_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_6_reg_849_pp0_iter5_reg),21));

    m_diff_hi_V_fu_481_p4 <= ret_V_3_fu_475_p2(12 downto 4);
    m_diff_lo_V_fu_491_p1 <= ret_V_3_fu_475_p2(4 - 1 downto 0);
    m_exp_2_fu_263_p3 <= 
        sext_ln1311_fu_259_p1 when (isNeg_fu_245_p3(0) = '1') else 
        m_exp_fu_209_p2;
    m_exp_fu_209_p2 <= std_logic_vector(signed(ap_const_lv6_31) + signed(zext_ln659_fu_205_p1));
    m_fix_hi_V_fu_321_p4 <= r_V_6_fu_303_p3(18 downto 9);
    m_frac_l_V_fu_237_p3 <= (select_ln253_fu_229_p3 & ap_const_lv3_0);
    or_ln214_1_fu_556_p2 <= (and_ln209_reg_811_pp0_iter9_reg or and_ln18_reg_818_pp0_iter9_reg);
    or_ln214_fu_544_p2 <= (x_is_pinf_fu_539_p2 or and_ln209_reg_811_pp0_iter9_reg);
    or_ln338_fu_603_p2 <= (icmp_ln849_fu_597_p2 or icmp_ln338_1_reg_878_pp0_iter9_reg);
    or_ln849_1_fu_740_p2 <= (icmp_ln849_fu_597_p2 or icmp_ln338_reg_870_pp0_iter9_reg);
    or_ln849_2_fu_751_p2 <= (xor_ln849_fu_745_p2 or and_ln338_1_fu_735_p2);
    or_ln849_fu_701_p2 <= (and_ln849_fu_695_p2 or and_ln338_fu_685_p2);
    out_exp_V_fu_659_p2 <= std_logic_vector(unsigned(ap_const_lv5_F) + unsigned(trunc_ln168_fu_655_p1));
    p_Result_12_fu_153_p3 <= p_Val2_s_fu_149_p1(15 downto 15);
    p_Result_14_fu_665_p4 <= ((ap_const_lv1_0 & out_exp_V_fu_659_p2) & tmp_V_2_fu_647_p3);
    p_Result_7_fu_409_p3 <= grp_fu_777_p3(18 downto 18);
    p_Result_s_fu_215_p3 <= (ap_const_lv2_1 & tmp_V_1_fu_171_p1);
    p_Val2_s_fu_149_p1 <= x;
    r_V_6_fu_303_p3 <= 
        sext_ln1287_1_fu_289_p1 when (isNeg_fu_245_p3(0) = '1') else 
        trunc_ln1310_fu_299_p1;
    r_exp_V_2_fu_580_p3 <= 
        r_exp_V_3_reg_888_pp0_iter9_reg when (tmp_9_fu_568_p3(0) = '1') else 
        r_exp_V_fu_575_p2;
    r_exp_V_3_fu_439_p3 <= 
        select_ln805_fu_431_p3 when (p_Result_7_fu_409_p3(0) = '1') else 
        tmp_1_fu_400_p4;
    r_exp_V_fu_575_p2 <= std_logic_vector(signed(ap_const_lv7_7F) + signed(r_exp_V_3_reg_888_pp0_iter9_reg));
    ret_V_3_fu_475_p2 <= std_logic_vector(signed(lhs_V_fu_451_p1) - signed(sext_ln682_1_fu_471_p1));
    ret_V_4_fu_520_p2 <= std_logic_vector(unsigned(ap_const_lv15_4) + unsigned(lhs_V_1_fu_517_p1));
    rhs_V_1_fu_463_p3 <= (tmp_4_fu_454_p4 & ap_const_lv1_0);
    rhs_V_fu_389_p3 <= (p_Result_13_reg_860_pp0_iter1_reg & ap_const_lv12_800);
    sel_tmp16_fu_763_p2 <= (tmp_fu_757_p2 and icmp_ln853_fu_623_p2);
    sel_tmp5_fu_707_p2 <= (xor_ln214_fu_679_p2 and or_ln849_fu_701_p2);
    sel_tmp6_fu_713_p3 <= 
        select_ln339_fu_615_p3 when (sel_tmp5_fu_707_p2(0) = '1') else 
        bitcast_ln667_fu_675_p1;
    select_ln1322_fu_368_p3 <= 
        shl_ln1253_1_fu_358_p2 when (isNeg_reg_834(0) = '1') else 
        ashr_ln1287_1_fu_363_p2;
    select_ln214_1_fu_560_p3 <= 
        select_ln214_fu_549_p3 when (or_ln214_fu_544_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln214_2_fu_721_p3 <= 
        select_ln214_1_fu_560_p3 when (or_ln214_1_fu_556_p2(0) = '1') else 
        sel_tmp6_fu_713_p3;
    select_ln214_fu_549_p3 <= 
        ap_const_lv16_7FFF when (and_ln209_reg_811_pp0_iter9_reg(0) = '1') else 
        ap_const_lv16_7C00;
    select_ln253_fu_229_p3 <= 
        e_frac_V_fu_223_p2 when (p_Result_12_fu_153_p3(0) = '1') else 
        p_Result_s_fu_215_p3;
    select_ln339_fu_615_p3 <= 
        ap_const_lv16_0 when (tmp_11_fu_608_p3(0) = '1') else 
        ap_const_lv16_7C00;
    select_ln805_fu_431_p3 <= 
        tmp_1_fu_400_p4 when (icmp_ln805_fu_419_p2(0) = '1') else 
        add_ln805_fu_425_p2;
        sext_ln1285_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m_frac_l_V_reg_829),19));

        sext_ln1287_1_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ashr_ln1287_fu_283_p2),19));

        sext_ln1287_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m_frac_l_V_fu_237_p3),32));

        sext_ln1311_1_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m_exp_2_reg_839),16));

        sext_ln1311_2_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m_exp_2_fu_263_p3),32));

    sext_ln1311_2cast_fu_355_p1 <= sext_ln1311_2_reg_844(16 - 1 downto 0);
        sext_ln1311_3_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m_exp_2_fu_263_p3),15));

        sext_ln1311_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_253_p2),6));

        sext_ln682_1_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1_fu_463_p3),21));

    shl_ln1253_1_fu_358_p2 <= std_logic_vector(shift_left(unsigned(m_fix_l_V_reg_854),to_integer(unsigned('0' & sext_ln1311_2cast_fu_355_p1(16-1 downto 0)))));
    shl_ln1253_fu_293_p2 <= std_logic_vector(shift_left(unsigned(sext_ln1287_fu_279_p1),to_integer(unsigned('0' & sext_ln1311_2_fu_271_p1(31-1 downto 0)))));
    shl_ln_fu_375_p3 <= (select_ln1322_fu_368_p3 & ap_const_lv3_0);
    sub_ln1311_fu_253_p2 <= std_logic_vector(unsigned(ap_const_lv5_F) - unsigned(tmp_V_fu_161_p4));
    table_exp_Z1_ap_ufixed_14_1_ap_q_mode_5_ap_o_mode_3_0_array_V_address0 <= zext_ln498_fu_495_p1(9 - 1 downto 0);

    table_exp_Z1_ap_ufixed_14_1_ap_q_mode_5_ap_o_mode_3_0_array_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            table_exp_Z1_ap_ufixed_14_1_ap_q_mode_5_ap_o_mode_3_0_array_V_ce0 <= ap_const_logic_1;
        else 
            table_exp_Z1_ap_ufixed_14_1_ap_q_mode_5_ap_o_mode_3_0_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_587_p4 <= r_exp_V_2_fu_580_p3(6 downto 4);
    tmp_11_fu_608_p3 <= select_ln253_reg_824_pp0_iter9_reg(11 downto 11);
    tmp_1_fu_400_p4 <= grp_fu_777_p3(18 downto 12);
    tmp_2_fu_629_p4 <= grp_fu_795_p3(15 downto 6);
    tmp_3_fu_638_p4 <= grp_fu_795_p3(16 downto 7);
    tmp_4_fu_454_p4 <= grp_fu_788_p2(25 downto 7);
    tmp_9_fu_568_p3 <= grp_fu_795_p3(17 downto 17);
    tmp_V_1_fu_171_p1 <= p_Val2_s_fu_149_p1(10 - 1 downto 0);
    tmp_V_2_fu_647_p3 <= 
        tmp_3_fu_638_p4 when (tmp_9_fu_568_p3(0) = '1') else 
        tmp_2_fu_629_p4;
    tmp_V_fu_161_p4 <= p_Val2_s_fu_149_p1(14 downto 10);
    tmp_fu_757_p2 <= (xor_ln214_fu_679_p2 and or_ln849_2_fu_751_p2);
    trunc_ln1310_fu_299_p1 <= shl_ln1253_fu_293_p2(19 - 1 downto 0);
    trunc_ln168_fu_655_p1 <= r_exp_V_2_fu_580_p3(5 - 1 downto 0);
    trunc_ln805_fu_416_p1 <= grp_fu_777_p3(12 - 1 downto 0);
    x_is_pinf_fu_539_p2 <= (xor_ln936_fu_534_p2 and and_ln18_reg_818_pp0_iter9_reg);
    xor_ln214_fu_679_p2 <= (or_ln214_1_fu_556_p2 xor ap_const_lv1_1);
    xor_ln338_1_fu_729_p2 <= (or_ln338_fu_603_p2 xor ap_const_lv1_1);
    xor_ln338_fu_690_p2 <= (icmp_ln338_reg_870_pp0_iter9_reg xor ap_const_lv1_1);
    xor_ln849_fu_745_p2 <= (or_ln849_1_fu_740_p2 xor ap_const_lv1_1);
    xor_ln936_fu_534_p2 <= (p_Result_12_reg_806_pp0_iter9_reg xor ap_const_lv1_1);
    zext_ln498_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_diff_hi_V_fu_481_p4),64));
    zext_ln659_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_161_p4),6));
end behav;
